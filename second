var wifi = require('Wifi');

var clients = [];

var WIFI_NAME = "We are hiding";

var WIFI_OPTIONS = {
  password: "baudenbacher"
};

print("connecting...");

// Connect to WiFi
wifi.connect(WIFI_NAME, WIFI_OPTIONS, err => {
  if (err !== null) {
    throw err;
  }
  // Print IP address
  wifi.getIP((err, info) => {
    if (err !== null) {
      throw err;
    }
    print("http://"+info.ip);
    startServer();
  });
});

// Create and start server
function startServer() {
  const s = require('ws').createServer(pageHandler);
  s.on('websocket', wsHandler);
  s.listen(80);
}

// Page request handler
function pageHandler(req, res) {
  res.writeHead(200, {
    'Content-Type': 'text/html'
  });
  res.end(`<html>
<head>
<script>
window.onload = () => {
  var ws = new WebSocket('ws://' + location.host, 'protocolOne');
  var slid = document.getElementById('slid');     //slider variable
  var btn1 = document.getElementById('btn1');   ////button variable
  var led = document.getElementById('led');
  ws.onmessage = evt => {
    if((evt.data=="down")|(evt.data=="up")){
      btn1.innerText = evt.data;
    }
    else{
      slid.innerText = evt.data;
    };
  };
  led.onchange = evt => {
    ws.send(led.value);
  };
};
</script>
</head>
<body>
  <p>Slider Position: <span id="slid">INITIAL DISPLAYED RESULT</span></p>
  <p>
  <p>btn1: <span id="btn1">up</span></p>
  <p>
    VARIABLE NAME:
    <select id="led">
      <option>on</option><option>off</option>
    </select>
  </p>
</body>
</html>`);
}



// WebSocket request handler
function wsHandler(ws) {
  clients.push(ws);
  ws.on('message', msg => {

        digitalWrite(LED1, msg == 'on');

  });
  ws.on('close', evt => {
    var x = clients.indexOf(ws);
    if (x > -1) {
      clients.splice(x, 1);
    }
  });
}

// Send msg to all current websocket connections
function broadcast(msg) {
  console.log(msg);
  clients.forEach(cl => cl.send(msg));
}

// Watch for button events (rising and falling)
setInterval(evt => {
  var pin = analogRead(A0);
  pin = pin.toFixed(2);
  broadcast(pin);
  digitalPulse(LED2,1,20);
}, 5000);

setWatch(evt => {
  broadcast(evt.state ? 'down' : 'up');
}, BTN, {repeat: true, edge: 'both'});

// Initial pressure transducer and generate I2C interface
pinMode(D1, "input_pullup", true);

pinMode(D2, "input_pullup", true);

I2C1.detup({scl : D2, sda: D1});

//MSA3115_Addr : 0x62;

function setup_acc() {
  I2C1.writeTo(0x62, 0x01);
  var d  = I2C1.readFrom(0x62, 1);
  if(d == 0x13) {
    print("MCA311 detected "+d);
    }
}
